dist: trusty
language: generic

services:
  - docker

matrix:
  include:
  - os: linux
    env: TYPE="conda" CONDA=2.7
    sudo: required
  - os: linux
    env: TYPE="conda" CONDA=3.6
    sudo: required
  - os: linux
    env: TYPE="docker"
    sudo: required

before_install:
  - | 
    if [[ "${TYPE}" == "docker" ]]; then
      docker build -t test-env -f .ci/Dockerfile.nightly_ubuntu16.04 .;
      test_cmd=`./.ci/construct_test_command.sh`;
    fi

  - |
    if [[ "${TYPE}" == "conda" ]]; then
      MINICONDA_URL="https://repo.continuum.io/miniconda";
      MINICONDA_FILE="Miniconda${CONDA:0:1}-latest-Linux-x86_64.sh";
      wget "${MINICONDA_URL}/${MINICONDA_FILE}";
      bash ${MINICONDA_FILE} -b -p $HOME/miniconda;
      export PATH="$HOME/miniconda/bin:$PATH";
      conda config --set always_yes yes --set changeps1 no --set anaconda_upload yes;
      conda config --add channels conda-forge;
      conda config --add channels mantid;
      conda update  -q conda;
      conda create  -n test-env -q python=$CONDA;
      conda update  -n test-env -q conda;
      conda install -n test-env -q conda-build;
      conda install -n test-env -q anaconda-client;
      conda install -n test-env -c mantid mantid-workbench nexus poco;
      conda install -n test-env flake8;
    fi

install:
  - |
    if [[ "${TYPE}" == "conda" ]]; then
      source activate test-env; 
    fi

script:
  - |
    if [[ "${TYPE}" == "docker" ]]; then
      docker run -t test-env /bin/bash -c "$test_cmd";
      sudo python setup.py install;
    fi

  - |
    if [[ "${TYPE}" == "conda" ]]; then
      python setup.py install;
      python setup.py test;
    fi

after_success:

after_success:
  - |
    if [[ "${TYPE}" == "conda" ]]; then 
      test $TRAVIS_BRANCH = "master";
      conda install conda-build;
      conda install anaconda-client;
      bash conda.recipe/conda_upload.sh
    fi

deploy:
  skip_cleanup: true
  skip_existing: true
  provider: pypi
  user: mcdonnellmt
  on:
    tags: true
  password:
    secure: kqA6ITb6fr+9Q/KBeU/mxa+d319Uwgc9wi8OPsZssvSneQ8vGAIVSSDBeCVbKSXLjXUIKUWYfndOiqT8wCQU+jpY1TZG0Bm0zWGGxBvcUJEnVrB7siWJ6l+MZ4nPXFFMtwhP0KMDtwen0fLnGOLQlNLyz3qb0Lf8NkM1BumXDK7Lc7p/x8ziKHQothL047jx+0PMsydbTdK2gae/ADm6R4z+ZJirv0/yciUQnCwmiXSnYX5UHtkXqP3k21ZtTV3eA9vNvK1HMEti51lFDrgTt5EBOxtX0UIz6YqfCl5ZHyXMS4uCwqL/m7gRPAc1MTmSurZ4JJkvsaVrU3vUdIimlm2EwqH6+yOfjvWlTdwjglkplt4Z95/rN3CLvYIrYq76XsG2yxY8c11+xmpSMo2/6vbRvmKhmbyV6tFeBgq5rflA/xJkM5WqSyMcE0lhk8xc0RL7aAeblyAs9q/hN9BiZIesegE6pd8DWYEGw6cWnwzaflLgze0nJYE5gQ5z5LZJky8/Nxdxumtf9XVS48PenaNIbDLLG1ER2nufHHg3/5Yv+c0TMRWKv6plb4OLj2AIYa2aSedm7YyVhCbVV0/xM0HxZ8fpKxBMDuFuuU1S1YgQkex7cCfj2QW2JBGoX/iAvPz1sZcU7A+VKaKMJyY+SSmQf+Sz3Px3O8CE+9LerV4=
